void initialise_vehicles() {
            //if there is enough space in the array the for loop commences
            for (vehicles_index = 0; vehicles_index < vehicle_amount; vehicles_index++) {
                cout << "new loop started - debug message" << endl;
                bool loop = true;
                cout << "bool set to true - debug message" << endl;
                while (loop) {
                    cout << "while loop started - debug message" << endl;
                    string vehicle_type;
                    cout << "enter 'car', 'truck' or 'van' for the type of vehicle you want to initialise" << endl;
                    cin >> vehicle_type;
                    cin.ignore();
                    if (vehicle_type == "car" || vehicle_type == "truck" || vehicle_type == "van") {
                        //ask basic values
                        cout << "enter the brand: " << endl;
                        string brand;
                        getline(cin, brand);
                        cout << "enter the model: " << endl;
                        string model;
                        getline(cin, model);
                        cout << "enter the number plate: " << endl;
                        string number_plate;
                        getline(cin, number_plate);
                        cout << "enter the length in cm: " << endl;
                        int length;
                        cin >> length;
                        cout << "enter the width in cm: " << endl;
                        int width;
                        cin >> width;
                        cout << "enter the weight in kg: " << endl;
                        double weight;
                        cin >> weight;
                        cout << "enter the cost in $: " << endl;
                        double cost;
                        cin >> cost;

                        if (vehicle_type == "car") {
                            cout << "vehicle type is car - debug message" << endl;
                            //initialise a new car with the given values
                            Car car(length, width, weight, cost, brand, model, number_plate);
                            cout << "new car initialised - debug message" << endl;
                            //change the pointer of the vehicles from nullptr to car
                            vehicles[vehicles_index]  = new Car;
                            //copy the contents of the object to a vehicle in the seller array
                            *vehicles[vehicles_index] = car;
                            vehicles[vehicles_index]->set_brand(car.get_brand());
                            vehicles[vehicles_index]->set_model(car.get_model());
                            vehicles[vehicles_index]->set_number_plate(car.get_number_plate());
                            cout << "car copied to seller array - debug message" << endl;
                            //when the if statement ends, the object will delete itself
                            loop = false;
                        } else if (vehicle_type == "truck") {
                            cout << "vehicle type is truck - debug message" << endl;
                            cout << "enter the load volume in L: " << endl;
                            int load_volume;
                            cin >> load_volume;
                            cout << "enter the load capacity in kg: " << endl;
                            int load_capacity;
                            cin >> load_capacity;
                            //change the pointer of the vehicles from nullptr to truck
                            vehicles[vehicles_index]  = new Truck;
                            //initialise a new truck with the given values
                            Truck truck(length, width, weight, cost, brand, model, number_plate, load_volume, load_capacity);
                            //copy the contents of the object to a vehicle in the seller array
                            *vehicles[vehicles_index] = truck;
                            vehicles[vehicles_index]->set_brand(truck.get_brand());
                            vehicles[vehicles_index]->set_model(truck.get_model());
                            vehicles[vehicles_index]->set_number_plate(truck.get_number_plate());
                            vehicles[vehicles_index]->set_load_volume(truck.get_load_volume());
                            vehicles[vehicles_index]->set_load_capacity(truck.get_load_capacity());
                            cout << "truck copied to seller array - debug message" << endl;
                            loop = false;
                        } else if (vehicle_type == "van") {
                            cout << "vehicle type is van - debug message" << endl;
                            //change the pointer of the vehicles from nullptr to van
                            vehicles[vehicles_index]  = new Van;
                            string van_type;
                            cout << "enter 'passenger' or 'transport' for the van type you want to initialise: " << endl;
                            cin >> van_type;
                            cin.ignore();
                            if (van_type == "passenger") {
                                int load_volume = 0;
                                cout << "enter the load capacity of passengers in kg: " << endl;
                                int load_capacity;
                                cin >> load_capacity;
                                cout << "enter the number of passenger limit: " << endl;
                                int passenger_limit;
                                cin >> passenger_limit;
                                //initialise a new van with the given values
                                Van van(length, width, weight, cost, brand, model, number_plate, load_volume, load_capacity, passenger_limit);
                                //copy the contents of the object to a vehicle in the seller array
                                *vehicles[vehicles_index] = van;
                                vehicles[vehicles_index]->set_brand(van.get_brand());
                                vehicles[vehicles_index]->set_model(van.get_model());
                                vehicles[vehicles_index]->set_number_plate(van.get_number_plate());
                                vehicles[vehicles_index]->set_load_volume(van.get_load_volume());
                                vehicles[vehicles_index]->set_load_capacity(van.get_load_capacity());
                                vehicles[vehicles_index]->set_van_type(van.get_van_type());
                                vehicles[vehicles_index]->set_passenger_limit(van.get_passenger_limit());
                                cout << "van copied to seller array - debug message" << endl;
                                loop = false;
                            } else if (van_type == "transport") {
                                cout << "enter the load volume in L: " << endl;
                                int load_volume;
                                cin >> load_volume;
                                cout << "enter the load capacity of cargo in kg: " << endl;
                                int load_capacity;
                                cin >> load_capacity;
                                int passenger_limit = 0;
                                //initialise a new van with the given values
                                Van van(length, width, weight, cost, brand, model, number_plate, load_volume, load_capacity, passenger_limit);
                                //copy the contents of the object to a vehicle in the seller array
                                *vehicles[vehicles_index] = van;
                                vehicles[vehicles_index]->set_brand(van.get_brand());
                                vehicles[vehicles_index]->set_model(van.get_model());
                                vehicles[vehicles_index]->set_number_plate(van.get_number_plate());
                                vehicles[vehicles_index]->set_load_volume(van.get_load_volume());
                                vehicles[vehicles_index]->set_load_capacity(van.get_load_capacity());
                                vehicles[vehicles_index]->set_van_type(van.get_van_type());
                                vehicles[vehicles_index]->set_passenger_limit(van.get_passenger_limit());
                                cout << "van copied to seller array - debug message" << endl;
                                loop = false;
                            } else {
                                cout << "wrong van type entered, please try again" << endl;
                            }
                        }
                    } else {
                        cout << "entered wrong vehicle type entered, please try again" << endl;
                    }
                }
            }
        }